#!/bin/bash
set -Exeuo pipefail

# This is the bootstrapping script. It makes some validation
# checks, checks out the repo, and starts the spawner, which
# does the actual parsing and spawning of test runners.

THIS_DIR=$(dirname $0)

source $THIS_DIR/utils/common.sh

main() {

    # NB: bash trickery: don't use any of the function calls
    # in if-statements, it will completely disable set -e
    # inside the function... Yet another reason to port this
    # to Python.

    # NB2: if you need to change directory, do it in a
    # subshell.

    # NB3: the use of eval is strictly forbidden. Never
    # directly run a user-provided variable.

    # we keep everything non-reusable for this run in state/
    rm -rf state && mkdir state

    # Make sure we update GitHub if we exit due to errexit.
    # We also do a GitHub update on clean exit.
    ensure_err_github_update

    validate_vars

    checkout_ref

    # support the old name until projects migrate over
    if [ ! -f checkouts/$github_repo/.papr.yml ] &&
       [ ! -f checkouts/$github_repo/.papr.yaml ] &&
       [ ! -f checkouts/$github_repo/.redhat-ci.yml ]; then
        echo "INFO: No .papr.yml file found."
        exit 0
    fi

    export PYTHONUNBUFFERED=1

    exec python3 $THIS_DIR/spawner.py
}

validate_vars() {

    if [ -n "${github_branch:-}" ] && [ -n "${github_pull_id:-}" ]; then
        echo "ERROR: Can't specify both github_branch and github_pull_id."
        return 1
    elif [ -z "${github_branch:-}" ] && [ -z "${github_pull_id:-}" ]; then
        echo "ERROR: One of github_branch or github_pull_id must be specified."
        return 1
    else
        # let's not print token information
        set +x
        for var in github_{repo,token}; do
            if [ -z "${!var:-}" ]; then
                echo "ERROR: Missing variable '${var}'."
                return 1
            fi
        done
        set -x
    fi
}

checkout_ref() {

    local repo=checkouts/$github_repo

    # let's re-use checkouts if available (this is safe since we don't actually
    # pollute these repos, we just rsync them)
    if [ ! -d $repo ]; then
        git clone https://github.com/$github_repo $repo
    else
        # update the origin refs for projects that expect a fresh clone
        git -C $repo fetch origin
    fi

    local sha_cmp

    # checkout target commit
    if [ -n "${github_branch:-}" ]; then
        git -C $repo fetch origin $github_branch
        sha_cmp=$(git -C $repo rev-parse FETCH_HEAD)
        export github_url=https://github.com/$github_repo/commits/$github_branch
    else
        if git -C $repo fetch origin refs/pull/$github_pull_id/merge; then
            touch state/is_merge_sha
            sha_cmp=$(git -C $repo rev-parse FETCH_HEAD^2)
        else
            git -C $repo fetch origin refs/pull/$github_pull_id/head
            sha_cmp=$(git -C $repo rev-parse FETCH_HEAD)
        fi
        export github_url=https://github.com/$github_repo/pull/$github_pull_id
    fi

    if [ -n "${github_commit:-}" ] && [ "$github_commit" != "$sha_cmp" ]; then
        echo "INFO: Expected commit $github_commit, but received $sha_cmp."
        echo "INFO: Most likely the ref was updated since this job (or parent"
        echo "INFO: job) was triggered. Silently exiting since another run with"
        echo "INFO: the updated SHA is underway."
        exit 0
    elif [ -z "${github_commit:-}" ]; then
        # define it as a global
        export github_commit=$sha_cmp
    fi

    git -C $repo checkout FETCH_HEAD
    git -C $repo rev-parse HEAD > state/sha
}

ensure_err_github_update() {
    # we don't have a context yet, so let's just use a generic one
    trap "common_update_github 'Red Hat CI' error 'An internal error occurred.'" ERR
}

main "$@"
